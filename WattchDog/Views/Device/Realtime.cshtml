@using WattchDog.Models.Enums;
@model  WattchDog.Models.RealtimeDataViewModel

<h2>
    @if (Model.Device.Status)
    {
        <span class="glyphicon glyphicon-ok-circle" style="color:#5cb85c"></span>
    }
    else
    {
        <span class="glyphicon glyphicon-remove-circle" style="color:#d9534f"></span>
    }
    @(Model.Device.Name ?? "{ Unnamed }") - Realtime Data
</h2>

<div class="container">
    <div class="row">
        <div class="col-md-12" align="center">
            @Html.ActionLink("Hourly", "Hourly", new { macaddress = Model.Device.MacAddress, type = DeviceDataType.RealPower }, new { @class = "btn btn-default", @style = "margin-bottom:5px; width: 115px;" })
            @Html.ActionLink("Daily", "Daily", new { macaddress = Model.Device.MacAddress, type = DeviceDataType.RealPower }, new { @class = "btn btn-default", @style = "margin-bottom:5px; width: 115px;" })
            @Html.ActionLink("Monthly", "Monthly", new { macaddress = Model.Device.MacAddress, type = DeviceDataType.RealPower }, new { @class = "btn btn-default", @style = "margin-bottom:5px; width: 115px;" })
            @Html.ActionLink("Realtime", "Realtime", new { macaddress = Model.Device.MacAddress, type = DeviceDataType.RealPower }, new { @class = "btn btn-default", @style = "margin-bottom:5px; width: 115px;", @disabled = "disabled" })
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-2" align="center">
            @Html.ActionLink("Real Power", "Realtime", new { macaddress = Model.Device.MacAddress, type = DeviceDataType.RealPower }, new { @class = "btn btn-default", @style = "margin-bottom:5px; width: 115px;" })
            @Html.ActionLink("Energy Usage", "Realtime", new { macaddress = Model.Device.MacAddress, type = DeviceDataType.EnergyUsage }, new { @class = "btn btn-default", @style = "margin-bottom:5px; width: 115px;" })
            @Html.ActionLink("Power Factor", "Realtime", new { macaddress = Model.Device.MacAddress, type = DeviceDataType.PowerFactor }, new { @class = "btn btn-default", @style = "margin-bottom:5px; width: 115px;" })
            @Html.ActionLink("Rms Voltage", "Realtime", new { macaddress = Model.Device.MacAddress, type = DeviceDataType.Vrms }, new { @class = "btn btn-default", @style = "margin-bottom:5px; width: 115px;" })
            @Html.ActionLink("Rms Current", "Realtime", new { macaddress = Model.Device.MacAddress, type = DeviceDataType.Irms }, new { @class = "btn btn-default", @style = "margin-bottom:5px; width: 115px;" })
        </div>
        <div class="col-md-10" align="center">
            <div id="chart"></div>
        </div>
    </div>
</div>

@section scripts {
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--SignalR libraries. -->
    <script src="~/Scripts/jquery.signalR-2.3.0.min.js"></script>
    <script src="~/signalr/hubs"></script>

    <!--Highcharts library. -->
    <script src="https://code.highcharts.com/highcharts.js"></script>

    <script>
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var deviceInfo = $.connection.deviceHub;

            //Prepare the highcharts container
            var chartOptions = {};

            chartOptions.chart = {
                type: 'spline'
            };

            //Title Options
            chartOptions.title = {
                text: @switch (Model.Type)
                {
                    case DeviceDataType.EnergyUsage:
                        @:'Energy Usage of @(Model.Device.Name ?? @Model.Device.MacAddress)'
                        break;
                    case DeviceDataType.Irms:
                        @:'Rms Current of @(Model.Device.Name ?? @Model.Device.MacAddress)'
                        break;
                    case DeviceDataType.PowerFactor:
                        @:'Power Factor of @(Model.Device.Name ?? @Model.Device.MacAddress)'
                        break;
                    case DeviceDataType.RealPower:
                        @:'Real Power of @(Model.Device.Name ?? @Model.Device.MacAddress)'
                        break;
                    default:
                        @:'Rms Voltage of @(Model.Device.Name ?? @Model.Device.MacAddress)'
                        break;
                }
            };

            //X-Axis Options
            chartOptions.xAxis = {
                type: 'datetime',
                title: {
                    text: 'Time Recorded'
                },
                dateTimeLabelFormats: {
                    second: '%I:%M:%S'
                }
            };

            //Y-Axis Options
            chartOptions.yAxis = {
                title: {
                    text: @switch (Model.Type)
                    {
                        case DeviceDataType.EnergyUsage:
                            @:'Energy Usage (KWh)'
                            break;
                        case DeviceDataType.Irms:
                            @:'Rms Current (Arms)'
                            break;
                        case DeviceDataType.PowerFactor:
                            @:'Power Factor'
                            break;
                        case DeviceDataType.RealPower:
                            @:'Real Power (W)'
                            break;
                        default:
                            @:'Rms Voltage (Vrms)'
                            break;
                    }
                }
            };

            //Data hover tooltip Options
            chartOptions.tooltip = {
                headerFormat: '',
                pointFormat: @if (Model.Type == DeviceDataType.EnergyUsage)
                {
                    @:'<b>Time:</b> {point.x:%I:%M:%S %p}<br/><b>Value:</b> {point.y:.7f}'
                }
                else
                {
                    @:'<b>Time:</b> {point.x:%I:%M:%S %p}<br/><b>Value:</b> {point.y:.2f}'
                }
            };

            chartOptions.plotOptions = {
                spline: {
                    marker: {
                        enabled: true
                    }
                }
            };

            //Legend Options
            chartOptions.legend = {
                enabled: false
            }

            chartOptions.time = {
                useUTC: false
            }

            //Initializing retrieved dataset for chart
            datapoints = [];
            @foreach (var datapoint in Model.Data)
            {
                @:datapoints.push([(new Date("@(datapoint.Time.ToString("yyyy-MM-ddTHH:mm:ss.fffff"))")).getTime(), @datapoint.Value])
            }

            chartOptions.series = [
                {
                    name: 'Measurements',
                    data: datapoints
                }
            ]

            //Creating the chart element on the page
            $('#chart').highcharts(chartOptions);

            // Callback function called by SignalR central hub (to update data in realtime)
            deviceInfo.client.addMeasurements = function (realpower, energyusage, powerfactor, vrms, irms, date) {
                var chartObj = $('#chart').highcharts(); //Get reference to chart javascript object
                var series = chartObj.series[0];
                var shift = series.data.length >= 10;

                date = (new Date(date)).getTime(); //Converting from string to JS datetime object

                //Adding point and removing old one off graph based on which page view we are looking at
                @switch (Model.Type)
                {
                    case DeviceDataType.EnergyUsage:
                        @:chartObj.series[0].addPoint([date, energyusage], true, shift);
                        break;
                    case DeviceDataType.Irms:
                        @:chartObj.series[0].addPoint([date, irms], true, shift);
                        break;
                    case DeviceDataType.PowerFactor:
                        @:chartObj.series[0].addPoint([date, powerfactor], true, shift);
                        break;
                    case DeviceDataType.RealPower:
                        @:chartObj.series[0].addPoint([date, realpower], true, shift);
                        break;
                    default:
                        @:chartObj.series[0].addPoint([date, vrms], true, shift);
                        break;
                }
            };

            // Start the connection with SignalR hub.
            $.connection.hub.start().done(function () {
                deviceInfo.server.connect('@Model.Device.MacAddress');
            });
        });
    </script>
}